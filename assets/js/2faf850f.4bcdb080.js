"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[380],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=s.createContext({}),c=function(e){var t=s.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return s.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(p,".").concat(m)]||u[m]||l[m]||o;return n?s.createElement(f,a(a({ref:t},d),{},{components:n})):s.createElement(f,a({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var c=2;c<o;c++)a[c]=n[c];return s.createElement.apply(null,a)}return s.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var s=n(7462),r=(n(7294),n(3905));const o={title:"Tezos",slug:"/integrations/tezos"},a="Tezos Integration",i={unversionedId:"integrations/tezos",id:"integrations/tezos",title:"Tezos",description:"Acurast can be used to get access to computational resources for various use cases and bring them to Tezos.",source:"@site/docs/integrations/tezos.mdx",sourceDirName:"integrations",slug:"/integrations/tezos",permalink:"/integrations/tezos",draft:!1,editUrl:"https://github.com/acurast/acurast-docs/docs/integrations/tezos.mdx",tags:[],version:"current",frontMatter:{title:"Tezos",slug:"/integrations/tezos"},sidebar:"docs",previous:{title:"Substrate With WASM",permalink:"/integrations/substrate-wasm"},next:{title:"Networks",permalink:"/networks"}},p={},c=[{value:"Integration Example",id:"integration-example",level:2},{value:"Tezos smart contract implementation",id:"tezos-smart-contract-implementation",level:3},{value:"Job specification",id:"job-specification",level:3},{value:"Job Registration",id:"job-registration",level:2}],d=(l="RunnableCode",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var l;const u={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tezos-integration"},"Tezos Integration"),(0,r.kt)("p",null,"Acurast can be used to get access to computational resources for various use cases and bring them to Tezos."),(0,r.kt)("h2",{id:"integration-example"},"Integration Example"),(0,r.kt)("p",null,"The following example shows a possible integration approach for Tezos."),(0,r.kt)("h3",{id:"tezos-smart-contract-implementation"},"Tezos smart contract implementation"),(0,r.kt)("p",null,"The first step is the implementation and deployment of the Tezos contract."),(0,r.kt)("p",null,"The example used is a simple entropy provider written in SmartPy, which receives entropy from an Acurast Processor and exposes it to other contracts on Tezos."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://smartpy.io/ide?cid=QmQqJBcTzvxtELjDJKtrbk3KwuUXYzcxqJAZ4n7QWqjfC8&k=ef7176cc6737527d0616"},(0,r.kt)("strong",{parentName:"a"},"SmartPy IDE"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'import smartpy as sp\n\n@sp.module\ndef main():\n    t_storage: type = sp.record(\n        governance_address = sp.address,\n        entropy=sp.bytes,\n        last_update=sp.timestamp,\n        processors=sp.set[sp.address],\n        subscriptions=sp.big_map[sp.address, sp.timestamp]\n    ).layout(("entropy", ("governance_address", ("last_update", ("processors", "subscriptions")))))\n\n    class EntropyProvider(sp.Contract):\n        def __init__(self, initial_storage):\n            self.data = sp.cast(initial_storage, t_storage)\n\n\n        @sp.entrypoint\n        def submit_entropy(self, entropy):\n            # Ensures that only the processor can call this function\n            assert self.data.processors.contains(sp.sender), "NOT_PROCESSOR"\n            # Update entropy\n            self.data.entropy = sp.blake2b(self.data.entropy + entropy)\n            self.data.last_update = sp.now\n\n        @sp.entrypoint\n        def subscribe(self, address):\n            # The subscription is <block_timestamp> + <mutez amount>\n            ### Both values represent seconds\n            # 1 mutez = 1 second\n            # 1 tez = ~11.57 days\n\n            mutez_to_seconds = sp.fst(sp.ediv(sp.amount, sp.mutez(1)).unwrap_some())\n            expiration = sp.add(sp.now, sp.to_int(mutez_to_seconds))\n            self.data.subscriptions[address] = expiration\n\n        @sp.entry_point\n        def configure(self, actions):\n            # Only the governance address can call this entry point\n            assert self.data.governance_address == sp.sender, "NOT_ALLOWED"\n\n            # Perform actions\n            for action in actions:\n                with sp.match(action):\n                    with sp.case.update_governance_address as governance_address:\n                        self.data.governance_address = governance_address\n                    with sp.case.update_processors as update_processor_actions:\n                        for update_processor_action in update_processor_actions:\n                            with sp.match(update_processor_action):\n                                with sp.case.add as processor_address:\n                                    self.data.processors.add(processor_address)\n                                with sp.case.remove as processor_address:\n                                    self.data.processors.remove(processor_address)\n\n\n        @sp.entry_point\n        def withdraw(self, address):\n            # Only the governance address can call this entry point\n            assert self.data.governance_address == sp.sender, "NOT_ALLOWED"\n            # Transfer balance\n            sp.send(address, sp.balance)\n\n        @sp.onchain_view()\n        def consume_entropy(self, max_age_in_seconds):\n            # Verify if the consumer has an active subscription\n            subscription = self.data.subscriptions.get(sp.sender, error = "NOT_SUBSCRIBED")\n            assert subscription >= sp.now, "SUBSCRIPTION_EXPIRED"\n            # Consumers can specify the maximum entropy age they are willing to accept\n            assert (sp.now - self.data.last_update) <= max_age_in_seconds, "ENTROPY_TOO_OLD"\n\n            return self.data.entropy\n\n@sp.add_test(name = "EntropyProviderTest")\ndef test():\n    scenario = sp.test_scenario(main)\n\n    # Test accounts\n    governance = sp.test_account("governance")\n    consumer1 = sp.test_account("consumer1")\n    processor1 = sp.test_account("processor1")\n\n    initial_storage = sp.record(\n        governance_address = governance.address,\n        entropy = sp.bytes("0x"),\n        last_update = sp.timestamp(0),\n        processors = sp.set([processor1.address]),\n        subscriptions = sp.big_map()\n    )\n    contract = main.EntropyProvider(initial_storage)\n\n    scenario += contract\n\n    contract.subscribe(consumer1.address).run(amount = sp.mutez(1000000))\n    contract.submit_entropy(sp.pack(1)).run(\n        valid     = False,\n        exception = "NOT_PROCESSOR",\n        sender    = consumer1.address\n    )\n    contract.submit_entropy(sp.pack(1)).run(\n        sender = processor1.address,\n        now = sp.timestamp(100)\n    )\n')),(0,r.kt)("h3",{id:"job-specification"},"Job specification"),(0,r.kt)("p",null,"Now that the contract has been deployed, we can prepare the script that will get executed by the Processor to provision the entropy."),(0,r.kt)("p",null,"The script below computes some random bytes securely and calls the function ",(0,r.kt)("inlineCode",{parentName:"p"},"submit_entropy")," of the contract deployed above."),(0,r.kt)(d,{mdxType:"RunnableCode"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="JobLogic.js"',title:'"JobLogic.js"'},'const TEZOS_RPCS = [\n  "https://rpc.ghostnet.teztnets.xyz",\n  "https://tezos-ghostnet-node.prod.gke.papers.tech",\n];\nconst TEZOS_CONTRACT = "KT1JqvL3qUPDFRx9LZxDzRn6G4RpTg5pTFJY";\n\nconst entropy = "0x" + generateSecureRandomHex();\n\n_STD_.chains.tezos.customCall(\n  TEZOS_RPCS,\n  entropy,\n  {\n    fee: 1500,\n    gasLimit: 3000,\n    storageLimit: 0,\n    destination: TEZOS_CONTRACT,\n    entrypoint: "submit_entropy",\n  },\n  (opHash) => {\n    print("Succeeded: " + opHash);\n  },\n  (err) => {\n    print("Failed: " + err);\n  }\n);\n'))),(0,r.kt)("div",{class:"padding-vert--md"}),(0,r.kt)("h2",{id:"job-registration"},"Job Registration"),(0,r.kt)("p",null,"Check out ",(0,r.kt)("a",{parentName:"p",href:"/developers/get-started"},"How to get started with the Acurast Console")," to register your Job."))}m.isMDXComponent=!0}}]);