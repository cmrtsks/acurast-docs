"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[507],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<s;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8472:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>v,default:()=>_,frontMatter:()=>g,metadata:()=>y,toc:()=>w});var r=n(7462),a=n(7294),s=n(3905),l=n(6010),o=n(2389),i=n(7392),c=n(7094),u=n(2466);const p="tabList__CuJ",d="tabItem_LNqP";function m(e){var t,n;const{lazy:s,block:o,defaultValue:m,values:f,groupId:b,className:h}=e,g=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=f?f:g.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),y=(0,i.l)(v,((e,t)=>e.value===t.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===m?m:null!=(t=null!=m?m:null==(n=g.find((e=>e.props.default)))?void 0:n.props.value)?t:g[0].props.value;if(null!==k&&!v.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:S}=(0,c.U)(),[_,T]=(0,a.useState)(k),x=[],{blockElementScrollPositionUntilNextRender:N}=(0,u.o5)();if(null!=b){const e=w[b];null!=e&&e!==_&&v.some((t=>t.value===e))&&T(e)}const E=e=>{const t=e.currentTarget,n=x.indexOf(t),r=v[n].value;r!==_&&(N(t),T(r),null!=b&&S(b,String(r)))},O=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var r;const t=x.indexOf(e.currentTarget)+1;n=null!=(r=x[t])?r:x[0];break}case"ArrowLeft":{var a;const t=x.indexOf(e.currentTarget)-1;n=null!=(a=x[t])?a:x[x.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,l.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":o},h)},v.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:e=>x.push(e),onKeyDown:O,onFocus:E,onClick:E},s,{className:(0,l.Z)("tabs__item",d,null==s?void 0:s.className,{"tabs__item--active":_===t})}),null!=n?n:t)}))),s?(0,a.cloneElement)(g.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==_})))))}function f(e){const t=(0,o.Z)();return a.createElement(m,(0,r.Z)({key:String(t)},e))}const b="tabItem_Ymn6";function h(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(b,r),hidden:n},t)}const g={title:"Substrate With WASM",slug:"/integrations/substrate-wasm"},v="Substrate With A WASM Smart Contract Environment",y={unversionedId:"integrations/substrate-wasm",id:"integrations/substrate-wasm",title:"Substrate With WASM",description:"Acurast can be used to fulfill directly to smart contracts deployed on Substrate chains with a pallet-contracts integration.",source:"@site/docs/integrations/substrate-wasm.mdx",sourceDirName:"integrations",slug:"/integrations/substrate-wasm",permalink:"/integrations/substrate-wasm",draft:!1,editUrl:"https://github.com/acurast/acurast-docs/docs/integrations/substrate-wasm.mdx",tags:[],version:"current",frontMatter:{title:"Substrate With WASM",slug:"/integrations/substrate-wasm"},sidebar:"docs",previous:{title:"Substrate",permalink:"/integrations/substrate"},next:{title:"Tezos",permalink:"/integrations/tezos"}},k={},w=[{value:"Example integration with a WASM smart contract",id:"example-integration-with-a-wasm-smart-contract",level:3},{value:"Job Specification",id:"job-specification",level:2},{value:"Job Registration",id:"job-registration",level:2}],S={toc:w};function _(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},S,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"substrate-with-a-wasm-smart-contract-environment"},"Substrate With A WASM Smart Contract Environment"),(0,s.kt)("p",null,"Acurast can be used to fulfill directly to smart contracts deployed on Substrate chains with a ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/paritytech/substrate/tree/master/frame/contracts"},"pallet-contracts")," integration."),(0,s.kt)("h3",{id:"example-integration-with-a-wasm-smart-contract"},"Example integration with a WASM smart contract"),(0,s.kt)("p",null,"The following example shows simple WASM smart contracts implemented with ",(0,s.kt)("a",{parentName:"p",href:"https://use.ink/"},"ink!"),"."),(0,s.kt)("p",null,"Keep in mind that you can do much more with Acurast and get access to all modules besides these examples."),(0,s.kt)(f,{mdxType:"Tabs"},(0,s.kt)(h,{value:"price-feed",label:"Price Feed",default:!0,mdxType:"TabItem"},(0,s.kt)("p",null,"This example contract can store muliple prices for different symbols in the ",(0,s.kt)("inlineCode",{parentName:"p"},"prices")," map. Furthermore, only processors that have their address added to the ",(0,s.kt)("inlineCode",{parentName:"p"},"allow_list")," through the ",(0,s.kt)("inlineCode",{parentName:"p"},"allow")," method will be able to provide a price."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std, no_main)]\n\n#[ink::contract]\nmod simple_oracle {\n    use ink::storage::Mapping;\n    use ink::prelude::vec::Vec;\n\n    #[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n    #[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\n    pub enum Error {\n        CallerNotInAllowList,\n        NotAdmin\n    }\n\n    pub type Result<T> = core::result::Result<T, Error>;\n\n    #[ink(storage)]\n    pub struct SimpleOracle {\n        prices: Mapping<Vec<u8>, u128>,\n        allow_list: Mapping<AccountId, ()>,\n        admin: Option<AccountId>,\n    }\n\n    impl SimpleOracle {\n\n        #[ink(constructor)]\n        pub fn new(admin: Option<AccountId>) -> Self {\n            Self {\n                prices: Mapping::new(),\n                allow_list: Mapping::new(),\n                admin,\n            }\n        }\n\n        #[ink(constructor)]\n        pub fn default() -> Self {\n            Self::new(None)\n        }\n\n        #[ink(message)]\n        pub fn fulfill(&mut self, values: Vec<(Vec<u8>, u128)>) -> Result<()> {\n            if !self.allow_list.contains(self.env().caller()) {\n                return Err(Error::CallerNotInAllowList);\n            }\n\n            for (key, value) in values {\n                self.prices.insert(key, &value);\n            }\n\n            Ok(())\n        }\n\n        #[ink(message)]\n        pub fn allow(&mut self, account: AccountId) -> Result<()> {\n            if let Some(admin) = self.admin {\n                if self.env().caller() != admin {\n                    return Err(Error::NotAdmin)\n                }\n            }\n            self.allow_list.insert(account, &());\n            Ok(())\n        }\n\n        #[ink(message)]\n        pub fn disallow(&mut self, account: AccountId) -> Result<()> {\n            if let Some(admin) = self.admin {\n                if self.env().caller() != admin {\n                    return Err(Error::NotAdmin)\n                }\n            }\n            self.allow_list.remove(account);\n            Ok(())\n        }\n\n        /// Returns the current value for given key.\n        #[ink(message)]\n        pub fn get(&self, key: Vec<u8>) -> Option<u128> {\n            self.prices.get(key)\n        }\n    }\n\n    #[cfg(test)]\n    mod tests {\n        /// Imports all the definitions from the outer scope so we can use them here.\n        use super::*;\n\n        /// We test if the default constructor does its job.\n        #[ink::test]\n        fn default_works() {\n            let simple_oracle = SimpleOracle::default();\n            assert_eq!(simple_oracle.get(Default::default()), None);\n        }\n\n        /// We test a simple use case of our contract.\n        #[ink::test]\n        fn it_works() {\n            let mut simple_oracle = SimpleOracle::new(None);\n            assert_eq!(simple_oracle.get(Default::default()), None);\n            simple_oracle.allow(AccountId::from([1; 32])).expect("can allow account");\n            simple_oracle.fulfill(vec![(vec![0], 10)]).expect("fulfill works");\n            assert_eq!(simple_oracle.get(vec![0]), Some(10));\n        }\n    }\n}\n'))),(0,s.kt)(h,{value:"randomness",label:"Verifiable Randomness",mdxType:"TabItem"},'This example contract receives random bytes of the "Verifiable Randomness" template on the ',(0,s.kt)("a",{href:"https://console.acurast.com/create",target:"_blank"},"Acurast Console"),".",(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std)]\n\nuse ink;\n\n#[ink::contract]\nmod receiver {\n\n    #[ink(storage)]\n\n    pub struct Receiver {\n\n        price: u128,\n\n    }\n\n    /// Defines the storage of your contract.\n    /// Add new fields to the below struct in order\n    /// to add new static storage fields to your contract.\n    #[ink(storage)]\n    pub struct Receiver {\n        random_bytes: Vec<u8>,\n    }\n\n    impl Receiver {\n        #[ink(constructor)]\n        pub fn default() -> Self {\n            Self {\n                random_bytes: Default::default(),\n            }\n        }\n\n        #[ink(message)]\n        pub fn fulfill(&mut self, bytes: Vec<u8>) {\n            self.random_bytes = bytes;\n        }\n\n        #[ink(message)]\n        pub fn get_bytes(&self) -> Vec<u8> {\n            self.random_bytes.clone()\n        }\n    }\n\n}\n\n')))),(0,s.kt)("h2",{id:"job-specification"},"Job Specification"),(0,s.kt)("p",null,"Now that the contract has been deployed, we can prepare the script that will get executed by the Processor to provision the price feed or entropy."),(0,s.kt)("p",null,"Go to the ",(0,s.kt)("a",{parentName:"p",href:"https://console.acurast.com/"},"Acurast Console")," to test and deploy your script, these templates can also be found there."),(0,s.kt)(f,{mdxType:"Tabs"},(0,s.kt)(h,{value:"price-feed",label:"Price Feed",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const callIndex = "<#CALL_INDEX#>"; // the call index for the \'call\' extrinsic.\nconst destination = "<#CONTRACT_ADDRESS#>"; // contract address that will receive the \'fulfill\' call.\n_STD_.chains.substrate.signer.setSigner("SECP256K1"); // the type of signer used for sign the extrinsic call\nconst symbol = "AAVEBUSD";\nhttpGET(\n  "https://api.binance.com/api/v3/ticker/price?symbol=" + symbol,\n  {},\n  (response, _certificate) => {\n    const price = Number(JSON.parse(response)["price"]) * 10 ** 18;\n    const key = stringToHex(symbol);\n    const payload =\n      _STD_.chains.substrate.codec.encodeCompactUnsignedNumber(1) +\n      _STD_.chains.substrate.codec.encodeBytes(key) +\n      _STD_.chains.substrate.codec.encodeUnsignedNumber(price, 128);\n    _STD_.chains.substrate.contract.fulfill(\n      "<#NODE_URL#>",\n      callIndex,\n      destination,\n      payload,\n      {\n        refTime: "1470675162",\n        proofSize: "37458",\n      },\n      (opHash) => {\n        print("Succeeded: " + opHash);\n      },\n      (err) => {\n        print("Failed fulfill: " + err);\n      }\n    );\n  },\n  (err) => {\n    print("Failed get price: " + err);\n  }\n);\n\nfunction stringToHex(str) {\n  let hexString = "";\n  for (let i = 0; i < str.length; i++) {\n    let hex = str.charCodeAt(i).toString(16);\n    hexString += hex.length === 1 ? "0" + hex : hex;\n  }\n  return hexString;\n}\n'))),(0,s.kt)(h,{value:"randomness",label:"Verifiable Randomness",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const callIndex = "0x4606"; // the call index for the \'call\' extrinsic.\nconst destination = "<MY_WASM_CONTRACT_ADDRESS>"; // contract address that will receive the \'fulfill\' call.\n_STD_.chains.substrate.signer.setSigner("SECP256K1"); // the type of signer used for sign the extrinsic call\nhttpGET(\n  "https://api.binance.com/api/v3/ticker/price?symbol=AAVEBUSD",\n  {},\n  (response, _certificate) => {\n    const price = JSON.parse(response)["price"] * 10 ** 18;\n    const payload = _STD_.chains.substrate.codec.encodeUnsignedNumber(\n      price,\n      128\n    );\n    _STD_.chains.substrate.contract.fulfill(\n      "https://rpc.shibuya.astar.network",\n      callIndex,\n      destination,\n      payload,\n      {\n        refTime: "3951114240",\n        proofSize: "629760",\n      },\n      (opHash) => {\n        print("Succeeded: " + opHash);\n      },\n      (err) => {\n        print("Failed fulfill: " + err);\n      }\n    );\n  },\n  (err) => {\n    print("Failed get price: " + err);\n  }\n);\n')))),(0,s.kt)("h2",{id:"job-registration"},"Job Registration"),(0,s.kt)("p",null,"Check out ",(0,s.kt)("a",{parentName:"p",href:"/developers/get-started"},"How to get started with the Acurast Console")," to register your Job."))}_.isMDXComponent=!0}}]);