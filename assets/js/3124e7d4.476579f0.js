"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[92],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(t),g=r,h=d["".concat(c,".").concat(g)]||d[g]||p[g]||s;return t?a.createElement(h,o(o({ref:n},u),{},{components:t})):a.createElement(h,o({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1417:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const s={title:"Job Runtime Environment",slug:"/developers/job-runtime-environment"},o=void 0,i={unversionedId:"developers/job-runtime-environment",id:"developers/job-runtime-environment",title:"Job Runtime Environment",description:"The job's script running on Processors has access to the following a set of APIs.",source:"@site/docs/developers/job-runtime-environment.mdx",sourceDirName:"developers",slug:"/developers/job-runtime-environment",permalink:"/developers/job-runtime-environment",draft:!1,editUrl:"https://github.com/acurast/acurast-docs/docs/developers/job-runtime-environment.mdx",tags:[],version:"current",frontMatter:{title:"Job Runtime Environment",slug:"/developers/job-runtime-environment"},sidebar:"docs",previous:{title:"Job Creation",permalink:"/developers/job-creation"},next:{title:"On Demand Jobs",permalink:"/developers/on-demand-jobs"}},c={},l=[{value:"<strong>Top level functions</strong>",id:"top-level-functions",level:2},{value:"<strong>The _STD_ object</strong>",id:"the-_std_-object",level:2},{value:"<strong>Random</strong>",id:"random",level:3},{value:"<strong>Environment Variables</strong>",id:"environment-variables",level:3},{value:"<strong>Websocket</strong>",id:"websocket",level:3},{value:"<strong>Substrate functions</strong>",id:"substrate-functions",level:3},{value:"<strong>Substrate signer functions</strong>",id:"substrate-signer-functions",level:3},{value:"<strong>Substrate codec functions</strong>",id:"substrate-codec-functions",level:3},{value:"<strong>Substrate contract functions</strong>",id:"substrate-contract-functions",level:3},{value:"<strong>Tezos functions</strong>",id:"tezos-functions",level:3},{value:"<strong>Tezos encoding functions</strong>",id:"tezos-encoding-functions",level:3},{value:"<strong>Ethereum functions</strong>",id:"ethereum-functions",level:3},{value:"<strong>Aeternity functions</strong>",id:"aeternity-functions",level:3},{value:"<strong>Aeternity data encoding functions</strong>",id:"aeternity-data-encoding-functions",level:3}],u={toc:l};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The job's script running on Processors has access to the following a set of APIs."),(0,r.kt)("h2",{id:"top-level-functions"},(0,r.kt)("strong",{parentName:"h2"},"Top level functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Prints the given message to the console.\n * @param {string} message the message to print.\n */\nfunction print(message);\n\n/**\n * Performs an HTTP GET request.\n * @param {string} url the url to connect to.\n * @param {Record<string, string>} headers the request's headers, for example: { 'Accept': 'application/json' }.\n * @param {HttpSuccess} success the success callback function.\n * @param {HttpError} error the error callback function.\n */\nfunction httpGET(url, headers, success, error);\n\n/**\n * Performs an HTTP GET request.\n * @param {string} url the url to connect to.\n * @param {string} body a string representing the request's body.\n * @param {Record<string, string>} headers the request's headers, for example: { 'Content-Type': 'application/json' }.\n * @param {HttpSuccess} success the success callback function.\n * @param {HttpError} error the error callback function.\n */\nfunction httpPOST(url, body, headers, success, error);\n\n/**\n * @callback HttpSuccess\n * @param {string} payload the http request response payload as text.\n * @param {string} certificate a hex string representing the server certificate.\n */\ntype HttpSuccess = (payload, certificate) => void;\n\n/**\n * @callback HttpError\n * @param {string} message an error message.\n */\ntype HttpError = (message) => void;\n\n/**\n * Reads value from the environment.\n * @param {string} key The key used to get the value from the environment.\n * @returns The string value for the given key or undefined.\n */\nfunction environment(key);\n")),(0,r.kt)("h2",{id:"the-_std_-object"},(0,r.kt)("strong",{parentName:"h2"},"The ","_","STD","_"," object")),(0,r.kt)("p",null,"At the top level, a ",(0,r.kt)("inlineCode",{parentName:"p"},"_STD_")," object is defined. This object exposes additional functionalities."),(0,r.kt)("h3",{id:"random"},(0,r.kt)("strong",{parentName:"h3"},"Random")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Generates random bytes.\n * @returns Hex string representing random bytes.\n */\n_STD_.random.generateSecureRandomHex();\n")),(0,r.kt)("h3",{id:"environment-variables"},(0,r.kt)("strong",{parentName:"h3"},"Environment Variables")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * Environment object populated with the environment variables defined during job creation.\n * For example, to access a variable defined with the "MY_KEY" key do: _STD_.env["MY_KEY"].\n */\n_STD_.env;\n')),(0,r.kt)("h3",{id:"websocket"},(0,r.kt)("strong",{parentName:"h3"},"Websocket")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {string | string[]} url to the acurast websocket service.\n * @param {WsSuccess} success the success callback.\n * @param {WsError} error the error callback.\n */\n_STD_.ws.open(url, success, error);\n\n/**\n * @param {WsSuccess} success the success callback.\n * @param {WsError} error the error callback.\n */\n_STD_.ws.close(success, error);\n\n/**\n * @param {WsHandler} handler the handler called on every incoming message.\n */\n_STD_.ws.registerPayloadHandler(handler);\n\n/**\n * @param {string} recipient the public key in hex format of the recipient.\n * @param {string} payload the payload to send as a hex string.\n */\n_STD_.ws.send(recipient, payload);\n\n/**\n * @callback WsSuccess\n */\ntype WsSuccess = () => void;\n\n/**\n * @callback WsError\n * @param {string} message an error message.\n */\ntype WsError = (message) => void;\n\n/**\n * @callback WsHandler\n * @param {WsPayload} payload the payload message.\n */\ntype WsHandler = (payload) => void;\n\ntype WsPayload = { sender: string, recipient: string, payload: string };\n")),(0,r.kt)("h3",{id:"substrate-functions"},(0,r.kt)("strong",{parentName:"h3"},"Substrate functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Calls the `fulfill` extrinsic on the target substrate chain.\n * @param {string | string[]} nodes the node URL or array of node URLs.\n * @param {string} payload the string representation of the fulfill payload.\n * @param {object} extra an object with extra arguments. It needs to provide a `callIndex` which is the hex representation of the `fulfill` extrinsic's call index on the target substrate chain.\n * @param {SubstrateSuccess} success the success callback.\n * @param {SubstrateError} error the error callback.\n */\n_STD_.chains.substrate.fulfill(nodes, payload, extra, success, error);\n\n/**\n * @callback SubstrateSuccess\n * @param {string} operationHash the operation hash of the submitted extrinsic.\n */\ntype SubstrateSuccess = (operationHash) => void;\n\n/**\n * @callback SubstrateError\n * @param {string[]} message an error message.\n */\ntype SubstrateError = (message) => void;\n")),(0,r.kt)("h3",{id:"substrate-signer-functions"},(0,r.kt)("strong",{parentName:"h3"},"Substrate signer functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Sets the curve type to use when signing.\n * @param {'SECP256K1' | 'SECP256R1'} curveType\n */\n_STD_.chains.substrate.signer.setSigner(curveType);\n")),(0,r.kt)("h3",{id:"substrate-codec-functions"},(0,r.kt)("strong",{parentName:"h3"},"Substrate codec functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Hashes the given string using blake2b 256 bit.\n * @param {string} value\n * @returns The blake2b hash of the input value.\n */\n_STD_.chains.substrate.codec.blakeTwo256(value);\n\n/**\n * Encodes a number to the SCALE encoding.\n * @param {number | string} value the number to encode.\n * @param {8 | 32 | 64 | 128} bitSize the number's bit size.\n * @returns Hex string representing the SCALE encoded number.\n */\n_STD_.chains.substrate.codec.encodeUnsignedNumber(value, bitSize);\n\n/**\n * Encodes a number to the compact SCALE encoding.\n * @param {number | string} value the number to encode.\n * @returns Hex string representing the compact SCALE encoded number.\n */\n_STD_.chains.substrate.codec.encodeCompactUnsignedNumber(value);\n\n/**\n * Encodes bytes to SCALE encoding.\n * @param {string | ArrayBuffer} value hex string or an ArrayBuffer representing the bytes to encode.\n * @returns Hex string representing the SCALE encoded bytes.\n */\n_STD_.chains.substrate.codec.encodeBytes(value);\n\n/**\n * Encodes a boolean value to SCALE encoding.\n * @param {boolean} value the boolean value to encode.\n * @returns Hex string representing the SCALE encoded boolean.\n */\n_STD_.chains.substrate.codec.encodeBoolean(value);\n\n/**\n * Encodes a substrate address to SCALE encoding.\n * @param value the address to encode.\n * @returns Hex string representing the SCALE encoded address.\n */\n_STD_.chains.substrate.codec.encodeAddress(value);\n\n/**\n * Encodes a substrate address to a `MultiAddress` SCALE encoded vale.\n * @param value the address to encode.\n * @returns Hex string representing the SCALE encoded multi address.\n */\n_STD_.chains.substrate.codec.encodeMultiAddress(value: string);\n")),(0,r.kt)("h3",{id:"substrate-contract-functions"},(0,r.kt)("strong",{parentName:"h3"},"Substrate contract functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * Calls the `fulfill` extrinsic on a contract deployed on a chain integrating the substrate contract pallet (`pallet-contract`).\n * @param {string | stirng[]} nodes the node URL or array of node URLs.\n * @param {string} callIndex an hex string representing the call index of the `call` extrinsic of `pallet-contract`.\n * @param {string} destination the contract address.\n * @param {string} data the contract call arguments as an hex string.\n * @param {object} extra objet containing additional arguments, it has to at least provide `refTime` and `proofSize` as string values. Additionally it can provide a `value` as a string representing the amount to transfer with the contract call, `method` as a string representing the method name to use instead of `fulfill` and `storageDepositLimit` as a string value. Example: `{ refTime: "3951114240", proofSize: "629760" }`.\n * @param {SubstrateSuccess} success the success callback.\n * @param {SubstrateError} error the error callback.\n */\n_STD_.chains.substrate.contract.fulfill(\n  nodes,\n  callIndex,\n  destination,\n  data,\n  extra,\n  success,\n  error\n);\n')),(0,r.kt)("h3",{id:"tezos-functions"},(0,r.kt)("strong",{parentName:"h3"},"Tezos functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Calls the `fulfill` entrypoint on the Tezos Acurast Proxy contract.\n * @param {string | string[]} nodes the node URL or array of node URLs.\n * @param {any} payload the second argument for the `fulfill` entrypoint call on the Acurast Proxy contract. It represents a Michelson value that will be packed to bytes.\n * @param {object} extra object with extra arguments, it has to at least provide the values for the `fee`, `gasLimit` and `storageLimit` as numbers. Additionally it can provide an `entrypoint` as a string to use instead of `fulfill`. Example: `{ fee: 1500, gasLimit: 3000, storageLimit: 0 }`.\n * @param {TezosSuccess} success the success callback.\n * @param {TezosError} error the error callback.\n */\n_STD_.chains.tezos.fulfill(nodes, payload, extra, success, error);\n\n/**\n * Calls a custom entrypoint on a Tezos contract.\n * @param {string | string[]} nodes the node URL or array of node URLs.\n * @param {any} payload a Michelson value representing the arguments of the entrypoint being called.\n * @param {object} extra object with extra arguments, it has to at least provide the values for the `fee`, `gasLimit` and `storageLimit` as numbers. Additionally it can provide an `entrypoint` as a string to use instead of `fulfill` and `destination` as a string for the contract address to use instead of the default Acurast Proxy contract. Example: `{ fee: 1500, gasLimit: 3000, storageLimit: 0 }`.\n * @param {TezosSuccess} success the success callback.\n * @param {TezosError} error the error callback.\n */\n_STD_.chains.tezos.customCall(nodes, payload, extra, success, error);\n\n/**\n * @callback TezosSuccess\n * @param {string} operationHash the operation hash of the submitted operation.\n */\ntype TezosSuccess = (operationHash) => void;\n\n/**\n * @callback TezosError\n * @param {string[]} message an error message.\n */\ntype TezosError = (message) => void;\n")),(0,r.kt)("h3",{id:"tezos-encoding-functions"},(0,r.kt)("strong",{parentName:"h3"},"Tezos encoding functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Packs the given micheline structure.\n * @param value an object representing a micheline structure.\n * @returns Hex string representing the packed value.\n */\n_STD_.chains.tezos.encoding.pack(value);\n\n/**\n * Encodes the given micheline structure into a hex value that can be used as key for big map values.\n * @param value an object representing a micheline structure.\n * @returns Hex string representing the script hash encoded value.\n */\n_STD_.chains.tezos.encoding.encodeExpr(value);\n")),(0,r.kt)("h3",{id:"ethereum-functions"},(0,r.kt)("strong",{parentName:"h3"},"Ethereum functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Calls `fulfill` on a ethereum contract.\n *\n * The `extra` argument is an object that can provide the following:\n * - `methodSignature`: an optional string representing the method signature, if not provided `fulfill(bytes)` is used.\n * - `gasLimit`: a string representing the transaction's gas limit, if not provided '9000000' is used.\n * - `maxPriorityFeePerGas`: a string representing the transaction's maxPriorityFeePerGas, if not provided '0' is used.\n * - `maxFeePerGas`: a string representing the transaction's maxFeePerGas, if not provided '0'.\n *\n * @param {string} url the node URL.\n * @param {string} destination the contract's address.\n * @param {string} payload a hex string representing the arguments for the method call.\n * @param {object} extra object with extra arguments.\n * @param {EthereumSuccess} success the success callback.\n * @param {EthereumError} error the success callback.\n */\n_STD_.chains.ethereum.fulfill(url, destination, payload, extra, success, error);\n\n/**\n * @callback EthereumSuccess\n * @param {string} operationHash the operation hash of the submitted operation.\n */\ntype EthereumSuccess = (operationHash) => void;\n\n/**\n * @callback EthereumError\n * @param {string[]} message an error message.\n */\ntype EthereumError = (message) => void;\n")),(0,r.kt)("h3",{id:"aeternity-functions"},(0,r.kt)("strong",{parentName:"h3"},"Aeternity functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Calls `fulfill` on an aeternity contract.\n * \n * The `extra` argument is an object that can provide the following:\n * - `functionName`: an optional string representing the method name, if not provided `fulfill` is used.\n * - `gasLimit`: a string representing the transaction's gas limit, if not provided '25000' is used.\n * - `gasPrice`: a string representing the transaction's gas price, if not provided '1000000000' is used.\n * \n * @param {string} url the node URL.\n * @param {string} destination the contract's address.\n * @param {[object]} payload an array of encoded values. The objects inside this array need to be constructed using the functions found under `_STD_.chains.aeternity.data`.\n * @param {object} extra object with extra arguments.\n * @param {AeternitySuccess} success the success callback.\n * @param {AeternityError} error the success callback.\n */\n_STD_.chains.aeternity.fulfill(url, destination, payload, extra, success, error);\n\n/**\n * @callback EthereumSuccess\n * @param {string} operationHash the operation hash of the submitted operation.\n */\ntype AeternitySuccess = (operationHash) => void;\n\n/**\n * @callback EthereumError\n * @param {string[]} message an error message.\n */\ntype AeternityError = (message) => void;\n")),(0,r.kt)("h3",{id:"aeternity-data-encoding-functions"},(0,r.kt)("strong",{parentName:"h3"},"Aeternity data encoding functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * Returns an object representing an integer that can be used as payload in the `fulfill` call.\n * \n * @param {number | string} value a value representing an integer.\n * @returns an object representing an integer that can be used as payload in the `fulfill` call.\n */\n_STD_.chains.aeternity.data.int(value);\n\n/**\n * Returns an object representing a string that can be used as payload in the `fulfill` call.\n * \n * @param {string} value a string value.\n * @returns an object representing a string that can be used as payload in the `fulfill` call.\n */\n_STD_.chains.aeternity.data.string(value);\n\n/**\n * Returns an object representing bytes that can be used as payload in the `fulfill` call.\n * \n * @param {string} value an hex string representing the bytes.\n * @returns an object representing bytes that can be used as payload in the `fulfill` call.\n */\n_STD_.chains.aeternity.data.bytes(value);\n\n/**\n * Returns an object representing a list of objects that can be used as payload in the `fulfill` call.\n * \n * @param {object[]} values an array of objects that were created using the functions found under `_STD_.chains.aeternity.data`.\n * @returns an object representing a list of objects that can be used as payload in the `fulfill` call\n */\n_STD_.chains.aeternity.data.list(values);\n\n/**\n * Returns an object representing a tuple can be used as payload in the `fulfill` call.\n * \n * @param {object[]} values an array of objects that were created using the functions found under `_STD_.chains.aeternity.data`.\n * @returns an object representing a tuple can be used as payload in the `fulfill` call.\n */\n_STD_.chains.aeternity.data.tuple(values);\n\n/**\n * Returns an object representing a map can be used as payload in the `fulfill` call.\n * \n * The input value is an array of arrays of objects. The items need to be an array of size 2, \n * where the first element represents a map key and the second element represents its value:\n * \n * _STD_.chains.aeternity.data.map([\n *  [_STD_.chains.aeternity.data.string("key1"), _STD_.chains.aeternity.data.string("value1")], \n *  [_STD_.chains.aeternity.data.string("key2"), _STD_.chains.aeternity.data.string("value2")] \n * ]);\n * \n * @param {object[][]} values an array of arrays of objects that were created using the functions found under `_STD_.chains.aeternity.data`.\n * @returns an object representing a map can be used as payload in the `fulfill` call.\n */\n_STD_.chains.aeternity.data.map(values);\n\n/**\n * Returns an object representing an account pubkey can be used as payload in the `fulfill` call.\n * \n * @param {string} value a string representing an account pubkey .\n * @returns an object representing an account pubkey can be used as payload in the `fulfill` call.\n */\n_STD_.chains.aeternity.data.account_pubkey(value);\n')))}p.isMDXComponent=!0}}]);