"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[180],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=r,m=u["".concat(c,".").concat(h)]||u[h]||p[h]||a;return n?o.createElement(m,i(i({ref:t},d),{},{components:n})):o.createElement(m,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7990:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905)),a=n(941),i=n(4996);const s={title:"End-to-End Zero Trust Job Execution",slug:"/acurast-protocol/architecture/end-to-end"},c=void 0,l={unversionedId:"acurast-protocol/architecture/end-to-end",id:"acurast-protocol/architecture/end-to-end",title:"End-to-End Zero Trust Job Execution",description:"Acurast introduces a paradigm shift in verifiable and confidential computation, advancing the way decentralized applications are developed and deployed. To emphasize the inner workings of Acurast, the following description follows a job from definition and deployment to completion (c.f., Fig. 1).",source:"@site/docs/acurast-protocol/architecture/end-to-end.mdx",sourceDirName:"acurast-protocol/architecture",slug:"/acurast-protocol/architecture/end-to-end",permalink:"/acurast-protocol/architecture/end-to-end",draft:!1,editUrl:"https://github.com/acurast/acurast-docs/docs/acurast-protocol/architecture/end-to-end.mdx",tags:[],version:"current",frontMatter:{title:"End-to-End Zero Trust Job Execution",slug:"/acurast-protocol/architecture/end-to-end"},sidebar:"docs",previous:{title:"Overview",permalink:"/acurast-protocol/architecture/architecture"},next:{title:"Application Layer",permalink:"/acurast-protocol/architecture/application-layer"}},d={},p=[{value:"(1) <code>Job</code> Registration",id:"1-job-registration",level:3},{value:"(2) <code>Job</code> Acknowledgment",id:"2-job-acknowledgment",level:3},{value:"(3) <code>Job</code> Execution",id:"3-job-execution",level:3},{value:"(4) <code>Job</code> Fulfillment",id:"4-job-fulfillment",level:3},{value:"(5) <code>Job</code> Reporting",id:"5-job-reporting",level:3}],u={toc:p};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Acurast introduces a paradigm shift in verifiable and confidential computation, advancing the way decentralized applications are developed and deployed. To emphasize the inner workings of Acurast, the following description follows a ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," from definition and deployment to completion (",(0,r.kt)("em",{parentName:"p"},"c.f.,")," Fig. 1)."),(0,r.kt)(a.Z,{width:"800px",sources:{light:(0,i.Z)("/img/end-to-end_light.svg"),dark:(0,i.Z)("/img/end-to-end_dark.svg")},mdxType:"ThemedImage"}),(0,r.kt)("p",{style:{color:"gray",fontSize:"small"}},"Figure 1: End-to-End Zero Trust Job Execution"," "),(0,r.kt)("h3",{id:"1-job-registration"},"(1) ",(0,r.kt)("inlineCode",{parentName:"h3"},"Job")," Registration"),(0,r.kt)("p",null,"As a first step, consumers define their ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," details. For example, at what destination the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," should be ",(0,r.kt)("em",{parentName:"p"},"settled"),", i.e., on which protocol the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," output should be persisted (e.g., on Bitcoin Mainnet). After that, the consumer can select ",(0,r.kt)("inlineCode",{parentName:"p"},"ready-to-deploy")," templates, which can be adapted and changed to the consumer's needs, or a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," can be defined."),(0,r.kt)("p",null,"Depending integration level of the destination ecosystem with Acurast, the pre-payments for gas fees and rewards are settled in the native currency the consumer prefers (e.g., native TEZ for Tezos or ETH for Ethereum) or in native Acurast ACU tokens."),(0,r.kt)("p",null,"Next, the consumer must state on which processors the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," should be executed, either (a) on personal processors, or (b) on selected, known processors (e.g., known trusted entities), or (c) on public processors. For (a), a processor reward is not required, since it is a permissioned setting. For (b) a reward is optional, and for (c) the liquid matching engine and the Acurast orchestrator will match processor resources with consumers' ",(0,r.kt)("inlineCode",{parentName:"p"},"job"),"s."),(0,r.kt)("p",null,"In addition, more details of the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," need to be declared, such as ",(0,r.kt)("em",{parentName:"p"},"scheduling")," parameters, including start time, end time, the interval between executions, as well as the duration in milliseconds and the maximum start delay in milliseconds. Furthermore, specific resource management parameters, such as memory usage, network requests, and storage requirements of the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," need to be declared. Finally, the reward for the execution of the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," should be declared, as well as the minimum reputation (only applies to (c) public processors). Then the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," will be persisted on the Acurast Consensus Layer and reaches ",(0,r.kt)("inlineCode",{parentName:"p"},"OPEN")," state (c.f., Fig. 2)."),(0,r.kt)(a.Z,{width:"400px",sources:{light:(0,i.Z)("/img/job-states-light.svg"),dark:(0,i.Z)("/img/job-states-dark.svg")},mdxType:"ThemedImage"}),(0,r.kt)("p",{style:{color:"gray",fontSize:"small"}},"Figure 2: States of a job "),(0,r.kt)("h3",{id:"2-job-acknowledgment"},"(2) ",(0,r.kt)("inlineCode",{parentName:"h3"},"Job")," Acknowledgment"),(0,r.kt)("p",null,"Second, the processor acknowledges the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," and fetches the details from the Acurast chain. Depending on the fulfillment definition of the respective ",(0,r.kt)("inlineCode",{parentName:"p"},"job"),", the Merkle root of the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," with proof of assignment is persisted on the target destination (e.g., on a different target chain). Now the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," reaches the ",(0,r.kt)("inlineCode",{parentName:"p"},"MATCHED")," state, and no other processors will attempt to acknowledge it."),(0,r.kt)("p",null,"A prerequisite for assigning the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," to the processor is that the processor can execute the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," in full, following the ",(0,r.kt)("em",{parentName:"p"},"all-or-nothing")," principle. Since ",(0,r.kt)("inlineCode",{parentName:"p"},"job"),"s can have different scheduling configurations (e.g., on demand, every minute, etc.). Therefore, if the processor acknowledges that all slots can be adhered to, the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," reaches the ",(0,r.kt)("inlineCode",{parentName:"p"},"ASSIGNED")," state."),(0,r.kt)("h3",{id:"3-job-execution"},"(3) ",(0,r.kt)("inlineCode",{parentName:"h3"},"Job")," Execution"),(0,r.kt)("p",null,"Next, the ",(0,r.kt)("inlineCode",{parentName:"p"},"job_script")," is executed in the processor runtime. In the illustrated example of Fig. 1, the execution is performed inside of the Acurast Secure Hardware Runtime (ASHR), ",(0,r.kt)("em",{parentName:"p"},"i.e.,")," because ",(0,r.kt)("em",{parentName:"p"},"confidentiality")," is ascertained by secure hardware ",(0,r.kt)("em",{parentName:"p"},"e.g.,")," an isolated and external coprocessor (Google's Titan M2 Chip). Other runtimes (e.g., the Acurast Zero-Knowledge Runtime (AZKR)) may provide additional soundness guarantees."),(0,r.kt)("h3",{id:"4-job-fulfillment"},"(4) ",(0,r.kt)("inlineCode",{parentName:"h3"},"Job")," Fulfillment"),(0,r.kt)("p",null,"\\textbf{(4) ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," Fulfillment:} Once the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," execution is completed, the output is delivered to the declared destination, which could be another Web3 system (e.g., Tezos, Ethereum) or a Web2 system (e.g., REST-API, FL model) that receives the output. In case of a cross-chain transaction, the processor settles the gas fees on the destination chain, since the consumer has locked the necessary reward and gas fee amount up front when registering the ",(0,r.kt)("inlineCode",{parentName:"p"},"job"),"."),(0,r.kt)("h3",{id:"5-job-reporting"},"(5) ",(0,r.kt)("inlineCode",{parentName:"h3"},"Job")," Reporting"),(0,r.kt)("p",null,"After completion, the processor reports back to the Acurast Consensus Layer, more specifically to the reputation engine. If fulfillment was successful, the report contains a transaction hash of the target chain containing the fulfillment transaction. In case of failure, the report contains error messages. Finally, the ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," is now in ",(0,r.kt)("inlineCode",{parentName:"p"},"DONE")," state."),(0,r.kt)("p",null,"To assure the reliability of the Acurast protocol, the reputation engine is continuously fed with reliability metrics, for instance right after ",(0,r.kt)("inlineCode",{parentName:"p"},"job")," completion or failure."))}h.isMDXComponent=!0}}]);