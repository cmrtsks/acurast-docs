"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[924],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),b=a,m=u["".concat(c,".").concat(b)]||u[b]||d[b]||s;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5148:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));n(941),n(4996);const s={title:"On Demand Jobs",slug:"/developers/on-demand-jobs"},o=void 0,i={unversionedId:"developers/on-demand-jobs",id:"developers/on-demand-jobs",title:"On Demand Jobs",description:"On demand jobs are special kind of jobs that can be used to access a processor on demand from a dapp. This is achieved by having the job open a websocket connection to the acurast websocket service and setup handlers to process incoming messages.",source:"@site/docs/developers/on-demand-jobs.mdx",sourceDirName:"developers",slug:"/developers/on-demand-jobs",permalink:"/developers/on-demand-jobs",draft:!1,editUrl:"https://github.com/acurast/acurast-docs/docs/developers/on-demand-jobs.mdx",tags:[],version:"current",frontMatter:{title:"On Demand Jobs",slug:"/developers/on-demand-jobs"},sidebar:"docs",previous:{title:"Job Runtime Environment",permalink:"/developers/job-runtime-environment"},next:{title:"Acurast Processors",permalink:"/acurast-processors"}},c={},l=[{value:"On Demand job script",id:"on-demand-job-script",level:3},{value:"dApp integration",id:"dapp-integration",level:3},{value:"Acurast websocket service",id:"acurast-websocket-service",level:3}],p={toc:l};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"On demand jobs are special kind of jobs that can be used to access a processor on demand from a dapp. This is achieved by having the job open a websocket connection to the acurast websocket service and setup handlers to process incoming messages."),(0,a.kt)("h3",{id:"on-demand-job-script"},"On Demand job script"),(0,a.kt)("p",null,"The snippet below shows a very simple on demand job script that setups a websocket connection to the acurast websocket service and registers a payload handler that just sends back the message it receives."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'_STD_.ws.open( // open a websocket connection to the provided server\n    [\n       "wss://ws-1.ws-server-1.acurast.com",\n       "wss://ws-1.ws-server-2.acurast.com ",\n    ],\n    () => {\n        print("open: success")\n        _STD_.ws.registerPayloadHandler((payload) => { // register a handler for incoming messages\n            _STD_.ws.send(payload.sender, payload.payload) // just send back the received message\n        })\n    },\n    (err) => {\n        print("open: error " + err)\n    }\n);\n')),(0,a.kt)("p",null,"An on demand job should be scheduled with a long duration since the job needs to continuously run in order to be able to process incoming messages."),(0,a.kt)("h3",{id:"dapp-integration"},"dApp integration"),(0,a.kt)("p",null,"A dApp can start interacting with a running on demand job by integrating the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Acurast/acurast-typescript-sdk"},"Acurast typescript SDK"),". See the example dapp for on how a simple integration works."),(0,a.kt)("h3",{id:"acurast-websocket-service"},"Acurast websocket service"),(0,a.kt)("p",null,"The Acurast websocket service is a P2P service that allows to simply send messages to clients connected to it. Clients are authenticated during the initial connection setup by signing a challenge with their private key (in case of a processor, that would be the private key specifically generated for the job creator)."),(0,a.kt)("p",null,"The initial connection setup and authentication flow is as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Client sends an ",(0,a.kt)("inlineCode",{parentName:"li"},"init")," message to the websocket service."),(0,a.kt)("li",{parentName:"ul"},"Websocket service responds with a ",(0,a.kt)("inlineCode",{parentName:"li"},"challenge")," message, providing the bytes to be signed."),(0,a.kt)("li",{parentName:"ul"},"Client creates the payload to sign by concatenating the ",(0,a.kt)("inlineCode",{parentName:"li"},"challenge")," bytes, the client public key and a 16 bytes nonce."),(0,a.kt)("li",{parentName:"ul"},"Client signs the payload and responds to the challenge by sending beck the signature alongside the originally received challenge bytes, client public key and nonce."),(0,a.kt)("li",{parentName:"ul"},"Websocket service verifies the signature and if it is valid accepts the connection.")),(0,a.kt)("p",null,"After a client is authenticated, it can be addressed by specifying its public key as the recipient."))}d.isMDXComponent=!0}}]);