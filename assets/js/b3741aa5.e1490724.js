"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),f=u(n),m=i,d=f["".concat(s,".").concat(m)]||f[m]||p[m]||a;return n?r.createElement(d,l(l({ref:t},c),{},{components:n})):r.createElement(d,l({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8565:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={title:"Substrate",slug:"/integrations/substrate"},l="Substrate Integration",o={unversionedId:"integrations/substrate",id:"integrations/substrate",title:"Substrate",description:"GitHub Repository",source:"@site/docs/integrations/substrate.mdx",sourceDirName:"integrations",slug:"/integrations/substrate",permalink:"/integrations/substrate",draft:!1,editUrl:"https://github.com/acurast/acurast-docs/docs/integrations/substrate.mdx",tags:[],version:"current",frontMatter:{title:"Substrate",slug:"/integrations/substrate"},sidebar:"docs",previous:{title:"EVM Chains",permalink:"/integrations/evm"},next:{title:"Substrate With WASM",permalink:"/integrations/substrate-wasm"}},s={},u=[{value:"Introduction",id:"introduction",level:3},{value:"fulfill",id:"fulfill",level:4},{value:"Substrate Integration",id:"substrate-integration-1",level:3},{value:"P256 crypto",id:"p256-crypto",level:2},{value:"Setup",id:"setup",level:3},{value:"Integration",id:"integration",level:3}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"substrate-integration"},"Substrate Integration"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Acurast/acurast-core"},"GitHub Repository")),(0,i.kt)("p",null,"The Acurast Receiver Pallet allows a Substrate based chain to integrate the Acurast functionality to be able to securely receive real world data posted by the Acurast Processors."),(0,i.kt)("h3",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The Acurast Fulfillment Receiver Pallet, in combination with the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Acurast/acurast-core/tree/main/p256-crypto"},"Acurast P256 crypto")," package, allows a Substrate (Polkadot SDK) enabled chain to accept direct fulfillments from Acurast Processors."),(0,i.kt)("p",null,"The Pallet exposes one extrinsic."),(0,i.kt)("h4",{id:"fulfill"},"fulfill"),(0,i.kt)("p",null,"Allows to post the ","[Fulfillment]"," of a job. The fulfillment structure consists of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ipfs url of the ",(0,i.kt)("inlineCode",{parentName:"li"},"script")," executed."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"payload")," bytes representing the output of the ",(0,i.kt)("inlineCode",{parentName:"li"},"script"),".")),(0,i.kt)("h3",{id:"substrate-integration-1"},"Substrate Integration"),(0,i.kt)("p",null,"Implement ",(0,i.kt)("inlineCode",{parentName:"p"},"pallet_acurast_fulfillment_receiver::Config")," for your ",(0,i.kt)("inlineCode",{parentName:"p"},"Runtime")," and add the Pallet:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"frame_support::construct_runtime!(\n    pub enum Runtime where\n        Block = Block,\n        NodeBlock = Block,\n        UncheckedExtrinsic = UncheckedExtrinsic,\n    {\n        System: frame_system::{Pallet, Call, Config, Storage, Event<T>} = 0,\n        AcurastFulfillmentReceiver: crate::{Pallet, Call, Event<T>}\n    }\n);\n\nimpl pallet_acurast_fulfillment_receiver::Config for Runtime {\n    type Event = Event;\n    type OnFulfillment = FulfillmentHandler;\n    type WeightInfo = ();\n}\n\npub struct FulfillmentHandler;\nimpl OnFulfillment<Runtime> for FulfillmentHandler {\n    fn on_fulfillment(\n        from: <Runtime as frame_system::Config>::AccountId,\n        fulfillment: pallet_acurast_fulfillment_receiver::Fulfillment,\n    ) -> sp_runtime::DispatchResultWithInfo<frame_support::weights::PostDispatchInfo> {\n        /// check if origin is a valid Acurast Processor AccountId\n        if !is_valid(&from) {\n            return Err(DispatchError::BadOrigin.into());\n        }\n        /// if valid, then fulfillment can be used\n        Ok(().into())\n    }\n}\n")),(0,i.kt)("p",null,"Provide an implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"OnFulfillment")," to handle the received fulfillment. The implementation should check that the fulfillment is from a known Acurast Processor account id."),(0,i.kt)("p",null,"For example, if the job calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"fulfill")," extrisic has the following script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'httpGET(\n    "https://api.binance.com/api/v3/ticker/price?symbol=AAVEBUSD",\n    {},\n    (response, _certificate) => {\n        const price = JSON.parse(response)["price"] * 10 ** 18;\n        const payload = _STD_.chains.substrate.codec.encodeUnsignedNumber(price, 128);\n        _STD_.chains.substrate.fulfill(\n            "<URL_TO_YOUR_SUBSTRATE_NODE>", // replace with your substrate node URL\n            payload,\n            {\n                callIndex: \'0x4100\', // replace with the call index for the \'fulfill\' extrinsic of the pallet-acurast-fulfillment-receiver pallet.\n            },\n            (opHash) => {\n                print("Succeeded: " + opHash)\n            },\n            (err) => {\n                print("Failed fulfill: " + err)\n            },\n        )\n    },\n    (err) => {\n        print("Failed get price: " + err)\n    }\n);\n')),(0,i.kt)("p",null,"The script above will produce a ",(0,i.kt)("inlineCode",{parentName:"p"},"fulfill")," extrinsic call to the pallet at the specified call index with the payload being the SCALE encoded number representing a price. The following snipped shows how to decode the payload into a number on the receiving side:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct FulfillmentHandler;\nimpl OnFulfillment<Runtime> for FulfillmentHandler {\n    fn on_fulfillment(\n        from: <Runtime as frame_system::Config>::AccountId,\n        fulfillment: pallet_acurast_fulfillment_receiver::Fulfillment,\n    ) -> sp_runtime::DispatchResultWithInfo<frame_support::weights::PostDispatchInfo> {\n        /// check if origin is a valid Acurast Processor AccountId\n        if !is_valid(&from) {\n            return Err(DispatchError::BadOrigin.into());\n        }\n        // parse payload\n        let price: u128 = codec::decode_from_bytes(fulfillment.payload.into());\n        // do something with price\n        Ok(().into())\n    }\n}\n")),(0,i.kt)("h2",{id:"p256-crypto"},"P256 crypto"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Acurast/acurast-core/tree/main/p256-crypto"},"GitHub Repository")),(0,i.kt)("p",null,"This crate provides types that allow to add P256 (a.k.a secp256r1) signature verification support to Substrate (Polkadot SDK) based chains."),(0,i.kt)("h3",{id:"setup"},"Setup"),(0,i.kt)("p",null,"Add the following dependency to your Cargo manifest:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nacurast-p256-crypto = { git = "https://github.com/Acurast/acurast-core.git" }\n')),(0,i.kt)("h3",{id:"integration"},"Integration"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"acurast_p256_crypto::MultiSignature")," as your Substrate ",(0,i.kt)("inlineCode",{parentName:"p"},"Signature")," type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use acurast_p256_crypto::MultiSignature;\n\npub type Signature = MultiSignature;\npub type AccountId = <<Signature as Verify>::Signer as IdentifyAccount>::AccountId;\n...\n\nimpl frame_system::Config for Runtime {\n    type AccountId = AccountId;\n    ...\n}\n")))}p.isMDXComponent=!0}}]);